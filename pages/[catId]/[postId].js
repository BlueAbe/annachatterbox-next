import React from "react";
import Head from "next/head";
import { useEffect } from "react";
import Download from "../../components/Downolad";
import fetchData from "../../functions/fetchData";
import ombedParser from "../../functions/ombedParser";
import translatorParser from "../../functions/translatorParser";
// import { extract } from "oembed-parser";

export default function Post({ post }) {
  const materials = post.attributes.materials.data;
  useEffect(function () {
    const postContent = document.querySelector(".post-content");
    postContent.innerHTML = post.attributes.content.replaceAll(
      "/uploads",
      "https://annachatterbox.herokuapp.com/uploads"
    );
    // .replaceAll("<p>&nbsp;</p>", "");
  }, []);
  return (
    <>
      <Head>
        <title>{post.attributes.title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h2 className="heading-post">
          <span>{post.attributes.title}</span>
        </h2>
        <section className="post-content"></section>
        {materials ? (
          <section className="materials">
            <h2 className="heading-materials">Materia≈Çy</h2>
            <hr></hr>
            <div className="materials__links">
              {materials.map((m) => {
                return (
                  <Download
                    key={m.id}
                    url={m.attributes.url}
                    filename={m.attributes.name}
                    link={m.attributes.alternativeText}
                  ></Download>
                );
              })}
            </div>
          </section>
        ) : (
          <>
            <p>&nbsp;</p>
            <hr></hr>
          </>
        )}
      </main>
    </>
  );
}

export async function getStaticPaths() {
  const res = await fetchData(`/api/articles?populate[0]=category`);
  const strapi = await res.json();

  const paths = strapi.data.map((p) => {
    return {
      params: {
        catId: `${p.attributes.category.data.attributes.slug}`,
        postId: `${p.attributes.slug}`,
      },
    };
  });
  return {
    paths,
    fallback: false,
  };
}

export async function getStaticProps(context) {
  const { params } = context;
  const res = await fetchData(
    `/api/articles?filters[slug][$eq]=${params.postId}&populate=*`
  );
  const strapi = await res.json();
  const res2 = await fetchData(`/api/categories/`);
  const strapi2 = await res2.json();

  //oembed
  strapi.data[0].attributes.content = await ombedParser(
    strapi.data[0].attributes.content
  );
  //word's translator
  strapi.data[0].attributes.content = translatorParser(
    strapi.data[0].attributes.content
  );
  return {
    props: {
      post: strapi.data[0],
      categories: strapi2.data,
    },
    revalidate: 10,
  };
}
